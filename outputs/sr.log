Running catapult
 $PROJECT_HOME/temp_dut.c(19): Unsupported synthesis feature 'pointers-to-arrays on the interface' (CIN-70)

iteration  0
Prompt:  Help me rewrite this function to be compatible with HLS: 
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define Nb 4
#define Nk 4        // The number of 32 bit words in a key.
#define Nr 10       // The number of rounds in AES Cipher.

 #define AES_KEYLEN 16   // Key length in bytes
    #define AES_keyExpSize 176

typedef uint8_t state_t[4][4];
struct AES_ctx
{
  uint8_t RoundKey[AES_keyExpSize];
};// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
  (*state)[0][1] = (*state)[1][1];
  (*state)[1][1] = (*state)[2][1];
  (*state)[2][1] = (*state)[3][1];
  (*state)[3][1] = temp;

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
  (*state)[0][2] = (*state)[2][2];
  (*state)[2][2] = temp;

  temp           = (*state)[1][2];
  (*state)[1][2] = (*state)[3][2];
  (*state)[3][2] = temp;

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
  (*state)[3][3] = (*state)[2][3];
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}
 The current problem is: $PROJECT_HOME/temp_dut.c(19): Unsupported synthesis feature 'pointers-to-arrays on the interface' (CIN-70)


 also include a main function that tests the code in the same way of the reference code: 


static void phex(uint8_t* str)
{

    uint8_t len = 16;
    unsigned char i;
    for (i = 0; i < len; ++i)
        printf("%.2x", str[i]);
    printf("\n");
}

int main() {
    state_t state = {
        {0x00, 0x11, 0x22, 0x33},
        {0x44, 0x55, 0x66, 0x77},
        {0x88, 0x99, 0xaa, 0xbb},
        {0xcc, 0xdd, 0xee, 0xff}
    };

    ShiftRows( &state);
    phex((uint8_t*)state);

    return 0;}
```c
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define Nb 4
#define Nk 4        // The number of 32 bit words in a key.
#define Nr 10       // The number of rounds in AES Cipher.

#define AES_KEYLEN 16   // Key length in bytes
#define AES_keyExpSize 176

typedef uint8_t state_t[4][4];

struct AES_ctx {
    uint8_t RoundKey[AES_keyExpSize];
};

void ShiftRows(state_t state) {
    uint8_t temp;

    // Rotate first row 1 column to the left
    temp = state[0][1];
    state[0][1] = state[1][1];
    state[1][1] = state[2][1];
    state[2][1] = state[3][1];
    state[3][1] = temp;

    // Rotate second row 2 columns to the left
    temp = state[0][2];
    state[0][2] = state[2][2];
    state[2][2] = temp;

    temp = state[1][2];
    state[1][2] = state[3][2];
    state[3][2] = temp;

    // Rotate third row 3 columns to the left
    temp = state[0][3];
    state[0][3] = state[3][3];
    state[3][3] = state[2][3];
    state[2][3] = state[1][3];
    state[1][3] = temp;
}

void phex(uint8_t* str, uint8_t len) {
    for (int i = 0; i < len; ++i) {
        printf("%.2x", str[i]);
    }
    printf("\n");
}

int main() {
    state_t state = {
        {0x00, 0x11, 0x22, 0x33},
        {0x44, 0x55, 0x66, 0x77},
        {0x88, 0x99, 0xaa, 0xbb},
        {0xcc, 0xdd, 0xee, 0xff}
    };

    ShiftRows(state);
    phex((uint8_t*)state, 16);

    return 0;
}
```
Compiling the code
The code is correct
b'0055aaff4499ee3388dd2277cc1166bb\n'
b'0055aaff4499ee3388dd2277cc1166bb\n'
The code is functionally correct, number of iterations: 1
Running catapult
The code is correct
The code is correct, number of gpt runs:  1
